from typing import List, Optional, Set, Tuple

from .repository import AbstractSchemaRepository
from .types import NamedComplexSchema, Schema, NamedSchemas, UnionSchema

FINGERPRINT_ALGORITHMS: str

def extract_record_type(schema: Schema) -> str: ...
def schema_name(schema: NamedComplexSchema, parent_ns: str) -> Tuple[str, str]: ...
def extract_logical_type(schema: Schema) -> Optional[str]: ...
def is_single_record_union(schema: UnionSchema) -> bool: ...
def is_single_name_union(schema: UnionSchema) -> bool: ...
def load_schema(
    schema_path: str,
    *,
    repo: Optional[AbstractSchemaRepository] = ...,
    named_schemas: Optional[NamedSchemas] = ...,
    _write_hint: bool = ...,
    _injected_schemas: Optional[Set[str]] = ...,
) -> Schema: ...
def parse_schema(
    schema: Schema,
    named_schemas: Optional[NamedSchemas] = ...,
    *,
    expand: bool = ...,
    _write_hint: bool = ...,
    _force: bool = ...,
    _ignore_default_error: bool = ...,
) -> Schema: ...
def fullname(schema: Schema) -> str: ...
def expand_schema(schema: Schema) -> Schema: ...
def load_schema_ordered(
    ordered_schemas: List[str], *, _write_hint: bool = ...
) -> Schema: ...
def to_parsing_canonical_form(schema: Schema) -> str: ...
def fingerprint(parsing_canonical_form: str, algorithm: str) -> str: ...
